//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputActions/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Dialogue"",
            ""id"": ""08e14826-8890-49aa-b515-010df6c9338b"",
            ""actions"": [
                {
                    ""name"": ""NextPhrase"",
                    ""type"": ""Button"",
                    ""id"": ""13e940e0-5f4c-4838-949c-e75245ae6016"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SendPhrase"",
                    ""type"": ""Button"",
                    ""id"": ""9e68e65c-a258-4974-b0dc-05acde3ac3c5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3078d466-df57-4183-aba7-ef266721f8e9"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextPhrase"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""de8b9893-a487-4178-9d35-26b60fa15709"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextPhrase"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2f8d5217-dc01-4774-9077-347ad0834e0c"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SendPhrase"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a7a2348f-e60a-48ef-bc75-3a95fe937d9b"",
                    ""path"": ""*/{Submit}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SendPhrase"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Mission"",
            ""id"": ""e546fcc6-2517-4cca-8620-04ebd8fe4187"",
            ""actions"": [
                {
                    ""name"": ""SendAnswer"",
                    ""type"": ""Button"",
                    ""id"": ""7a73507b-ac1f-4869-8a81-aa0faca7020a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9e2216ec-4e93-4e2a-abed-63282d1d29be"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SendAnswer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Dialogue
        m_Dialogue = asset.FindActionMap("Dialogue", throwIfNotFound: true);
        m_Dialogue_NextPhrase = m_Dialogue.FindAction("NextPhrase", throwIfNotFound: true);
        m_Dialogue_SendPhrase = m_Dialogue.FindAction("SendPhrase", throwIfNotFound: true);
        // Mission
        m_Mission = asset.FindActionMap("Mission", throwIfNotFound: true);
        m_Mission_SendAnswer = m_Mission.FindAction("SendAnswer", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Dialogue
    private readonly InputActionMap m_Dialogue;
    private List<IDialogueActions> m_DialogueActionsCallbackInterfaces = new List<IDialogueActions>();
    private readonly InputAction m_Dialogue_NextPhrase;
    private readonly InputAction m_Dialogue_SendPhrase;
    public struct DialogueActions
    {
        private @Controls m_Wrapper;
        public DialogueActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @NextPhrase => m_Wrapper.m_Dialogue_NextPhrase;
        public InputAction @SendPhrase => m_Wrapper.m_Dialogue_SendPhrase;
        public InputActionMap Get() { return m_Wrapper.m_Dialogue; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DialogueActions set) { return set.Get(); }
        public void AddCallbacks(IDialogueActions instance)
        {
            if (instance == null || m_Wrapper.m_DialogueActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DialogueActionsCallbackInterfaces.Add(instance);
            @NextPhrase.started += instance.OnNextPhrase;
            @NextPhrase.performed += instance.OnNextPhrase;
            @NextPhrase.canceled += instance.OnNextPhrase;
            @SendPhrase.started += instance.OnSendPhrase;
            @SendPhrase.performed += instance.OnSendPhrase;
            @SendPhrase.canceled += instance.OnSendPhrase;
        }

        private void UnregisterCallbacks(IDialogueActions instance)
        {
            @NextPhrase.started -= instance.OnNextPhrase;
            @NextPhrase.performed -= instance.OnNextPhrase;
            @NextPhrase.canceled -= instance.OnNextPhrase;
            @SendPhrase.started -= instance.OnSendPhrase;
            @SendPhrase.performed -= instance.OnSendPhrase;
            @SendPhrase.canceled -= instance.OnSendPhrase;
        }

        public void RemoveCallbacks(IDialogueActions instance)
        {
            if (m_Wrapper.m_DialogueActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDialogueActions instance)
        {
            foreach (var item in m_Wrapper.m_DialogueActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DialogueActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DialogueActions @Dialogue => new DialogueActions(this);

    // Mission
    private readonly InputActionMap m_Mission;
    private List<IMissionActions> m_MissionActionsCallbackInterfaces = new List<IMissionActions>();
    private readonly InputAction m_Mission_SendAnswer;
    public struct MissionActions
    {
        private @Controls m_Wrapper;
        public MissionActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @SendAnswer => m_Wrapper.m_Mission_SendAnswer;
        public InputActionMap Get() { return m_Wrapper.m_Mission; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MissionActions set) { return set.Get(); }
        public void AddCallbacks(IMissionActions instance)
        {
            if (instance == null || m_Wrapper.m_MissionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MissionActionsCallbackInterfaces.Add(instance);
            @SendAnswer.started += instance.OnSendAnswer;
            @SendAnswer.performed += instance.OnSendAnswer;
            @SendAnswer.canceled += instance.OnSendAnswer;
        }

        private void UnregisterCallbacks(IMissionActions instance)
        {
            @SendAnswer.started -= instance.OnSendAnswer;
            @SendAnswer.performed -= instance.OnSendAnswer;
            @SendAnswer.canceled -= instance.OnSendAnswer;
        }

        public void RemoveCallbacks(IMissionActions instance)
        {
            if (m_Wrapper.m_MissionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMissionActions instance)
        {
            foreach (var item in m_Wrapper.m_MissionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MissionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MissionActions @Mission => new MissionActions(this);
    public interface IDialogueActions
    {
        void OnNextPhrase(InputAction.CallbackContext context);
        void OnSendPhrase(InputAction.CallbackContext context);
    }
    public interface IMissionActions
    {
        void OnSendAnswer(InputAction.CallbackContext context);
    }
}
